name: CI

on:
  push:
    branches: [main, main-dev, feature]
  pull_request:
    branches: [main, main-dev, feature]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: macos-latest
            compiler: clang

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            ninja-build \
            libfmt-dev \
            libspdlog-dev

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja fmt spdlog

      - name: Configure CMake
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBUILD_TESTS=ON \
            -DCMAKE_CXX_STANDARD=17

      - name: Build
        run: |
          NPROC=$(nproc 2>/dev/null || sysctl -n hw.ncpu)
          cmake --build build --config ${{ matrix.build_type }} -j $NPROC

      - name: Run Tests
        working-directory: build
        run: ctest --output-on-failure --verbose

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/Testing/

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            ninja-build \
            lcov \
            libfmt-dev \
            libspdlog-dev

      - name: Configure CMake with Coverage
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_TESTS=ON \
            -DENABLE_COVERAGE=ON \
            -DCMAKE_CXX_FLAGS="-O0 --coverage -fprofile-arcs -ftest-coverage -g"

      - name: Build
        run: cmake --build build -j $(nproc)

      - name: Run Tests
        working-directory: build
        run: ctest --output-on-failure

      - name: Generate Coverage Report
        run: |
          lcov --capture --directory build --output-file coverage.info \
            --ignore-errors mismatch,empty \
            --rc geninfo_unexecuted_blocks=1 || true
          lcov --remove coverage.info '/usr/*' '*/tests/*' '*/build/_deps/*' '*/.cache/*' \
            --output-file coverage.info.filtered \
            --ignore-errors mismatch,empty || true
          lcov --list coverage.info.filtered || true
          # Ensure file exists for upload
          touch coverage.info.filtered

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.info.filtered
          fail_ci_if_error: false
          verbose: true

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            clang-tidy \
            cppcheck \
            cmake \
            ninja-build \
            libfmt-dev \
            libspdlog-dev

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem \
            --error-exitcode=1 \
            -I include \
            src/ 2>&1 | tee cppcheck-report.txt || true

      - name: Configure for clang-tidy
        run: |
          cmake -B build -G Ninja \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DBUILD_TESTS=ON

      - name: Run clang-tidy
        run: |
          find src -name "*.cpp" | xargs clang-tidy -p build || true

      - name: Upload Analysis Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-results
          path: |
            cppcheck-report.txt
            build/compile_commands.json
